import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:web_socket_channel/web_socket_channel.dart';
// Flutter Map
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô openMap() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏î‡∏ô‡∏≥‡∏ó‡∏≤‡∏á
import 'package:team_up/widgets/open_map.dart';
// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Dialog ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
import 'package:team_up/widgets/room_details_dialog.dart';
// baseUrl ‡∏´‡∏£‡∏∑‡∏≠ config ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
import 'package:team_up/configserver/cf.dart';

class RoomListScreen extends StatefulWidget {
  final String token;
  final Function() onRoomUpdated;

  const RoomListScreen({
    Key? key,
    required this.token,
    required this.onRoomUpdated,
  }) : super(key: key);

  @override
  _RoomListScreenState createState() => _RoomListScreenState();
}

class _RoomListScreenState extends State<RoomListScreen> {
  List<Map<String, dynamic>> _joinedRooms = [];
  List<Map<String, dynamic>> _filteredRooms = [];
  bool _isLoading = true;
  String _errorMessage = '';
  late WebSocketChannel _channel;
  String _userId = '';

  @override
  void initState() {
    super.initState();
    _fetchJoinedRoomsFromDatabase();

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket
    _channel = WebSocketChannel.connect(Uri.parse('wss://team-up.up.railway.app'));

    _listenForRealtimeUpdates();
  }
  Future<void> _fetchRoomsFromDatabase() async {
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    final url = Uri.parse('$baseUrl/rooms');
    try {
      final response = await http.get(
        url,
        headers: {'Authorization': 'Bearer ${widget.token}'},
      );

      if (response.statusCode == 200) {
        final List<dynamic> fetchedRooms = jsonDecode(response.body);
        setState(() {
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï _joinedRooms ‡∏´‡∏£‡∏∑‡∏≠ _filteredRooms ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
          _filteredRooms = List<Map<String, dynamic>>.from(fetchedRooms);
        });
      } else {
        print('Failed to fetch rooms: ${response.body}');
      }
    } catch (error) {
      print('Error fetching rooms: $error');
    }
  }

  void _listenForRealtimeUpdates() {
    _channel.stream.listen(
          (message) {
        final decodedMessage = jsonDecode(message);
        final action = decodedMessage['action'];

        if (action == 'update' || action == 'join' || action == 'leave') {
          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
          _fetchRoomsFromDatabase();
          _fetchJoinedRoomsFromDatabase();
        }
      },
      onError: (error) {
        print('WebSocket Error: $error');
      },
      onDone: () {
        print('WebSocket connection closed');
      },
    );
  }



  @override
  void dispose() {
    _channel.sink.close();
    super.dispose();
  }

  /// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ Join ‡∏à‡∏≤‡∏Å Backend
  Future<void> _fetchJoinedRoomsFromDatabase() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final String? token = prefs.getString('jwt_token');
      final String? userId = prefs.getString('user_id');

      if (token == null || userId == null) {
        setState(() {
          _errorMessage = 'Token or User ID is missing.';
          _isLoading = false;
        });
        return;
      }

      _userId = userId;

      final url = Uri.parse('$baseUrl/rooms/joined/$_userId');
      final response = await http.get(
        url,
        headers: {
          'Authorization': 'Bearer $token',
        },
      );

      if (response.statusCode == 200) {
        final List<dynamic> data = jsonDecode(response.body);
        print('Fetched rooms: $data'); // Debug data
        setState(() {
          _joinedRooms = List<Map<String, dynamic>>.from(data);
          _filterJoinedRooms();
          _isLoading = false;
        });
      } else {
        setState(() {
          _errorMessage = 'Failed to load rooms: ${response.body}';
          _isLoading = false;
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching rooms: $e';
        _isLoading = false;
      });
    }
  }


  /// ‡∏Å‡∏£‡∏≠‡∏á/‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏´‡πâ‡∏≠‡∏á (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
  void _filterJoinedRooms() {
    _filteredRooms = List.from(_joinedRooms);
  }


  Future<void> _cancelRoom(Map<String, dynamic> room) async {
    final url = Uri.parse('$baseUrl/rooms/leave/${room["_id"]}?userId=$_userId');

    try {
      final prefs = await SharedPreferences.getInstance();
      final String? token = prefs.getString('jwt_token');

      if (token == null) {
        setState(() {
          _errorMessage = 'Token is missing.';
          _isLoading = false;
        });
        return;
      }

      final response = await http.delete(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        await Future.wait([
          _fetchRoomsFromDatabase(),
          _fetchJoinedRoomsFromDatabase(),
        ]);
        widget.onRoomUpdated();

        // ‡πÅ‡∏™‡∏î‡∏á SnackBar ‡∏™‡∏µ‡∏™‡πâ‡∏°
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á ${room["sportName"]} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! üß°'),
            backgroundColor: Colors.orange,
          ),
        );

        // ‡∏™‡πà‡∏á WebSocket Event
        _channel.sink.add(jsonEncode({
          'event': 'room_left',
          'roomId': room['_id'],
          'userId': _userId,
        }));
      } else {
        _showErrorPopup(
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: ${response.body}',
        );
      }
    } catch (error) {
      _showErrorPopup(
        '‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: ${error.toString()}',
      );
    }
  }




  /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Edit ‡∏´‡πâ‡∏≠‡∏á (Owner ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  void _editRoom(Map<String, dynamic> room) async {
    final sportNameController = TextEditingController(text: room['sportName']);
    final fieldNameController = TextEditingController(text: room['fieldName']);
    final priceController = TextEditingController(
      text: room['pricePerPerson'].toString(),
    );
    int? maxParticipants = room['maxParticipants'];

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡πâ‡∏≠‡∏á', style: TextStyle(color: Colors.orange)),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: sportNameController,
                decoration: const InputDecoration(
                  labelText: '‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏µ‡∏¨‡∏≤',
                  prefixIcon: Icon(Icons.sports, color: Colors.orange),
                ),
              ),
              const SizedBox(height: 10),
              TextField(
                controller: fieldNameController,
                decoration: const InputDecoration(
                  labelText: '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ô‡∏≤‡∏°',
                  prefixIcon: Icon(Icons.stadium, color: Colors.orange),
                ),
              ),
              const SizedBox(height: 10),
              TextField(
                controller: priceController,
                decoration: const InputDecoration(
                  labelText: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô (‡∏ö‡∏≤‡∏ó)',
                  prefixIcon: Icon(Icons.attach_money, color: Colors.orange),
                ),
                keyboardType: TextInputType.number,
              ),
              const SizedBox(height: 10),
              DropdownButtonFormField<int>(
                value: maxParticipants,
                decoration: const InputDecoration(
                  labelText: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î',
                  prefixIcon: Icon(Icons.people, color: Colors.orange),
                ),
                items: List.generate(38, (i) => i + 2)
                    .map((e) => DropdownMenuItem(
                  value: e,
                  child: Text('$e ‡∏Ñ‡∏ô'),
                ))
                    .toList(),
                onChanged: (value) => maxParticipants = value,
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: TextStyle(color: Colors.grey)),
          ),
          ElevatedButton(
            onPressed: () {
              if (sportNameController.text.isEmpty ||
                  fieldNameController.text.isEmpty ||
                  priceController.text.isEmpty ||
                  maxParticipants == null) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö')),
                );
                return;
              }
              Navigator.pop(context);
              _updateRoom(
                room['_id'],
                sportNameController.text,
                fieldNameController.text,
                double.parse(priceController.text),
                maxParticipants!,
              );
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
            child: const Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'),
          ),
        ],
      ),
    );
  }

  /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡πâ‡∏≠‡∏á (PUT) ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Backend
  Future<void> _updateRoom(
      String roomId,
      String sportName,
      String fieldName,
      double pricePerPerson,
      int maxParticipants,
      ) async {
    final url = Uri.parse('$baseUrl/rooms/$roomId/update');
    try {
      final prefs = await SharedPreferences.getInstance();
      final String? token = prefs.getString('jwt_token');

      if (token == null) {
        print('Error: Token is missing.');
        return;
      }

      final response = await http.put(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'sportName': sportName,
          'fieldName': fieldName,
          'pricePerPerson': pricePerPerson,
          'maxParticipants': maxParticipants,
        }),
      );

      if (response.statusCode == 200) {
        setState(() {
          final index = _joinedRooms.indexWhere((r) => r['_id'] == roomId);
          if (index != -1) {
            _joinedRooms[index] = {
              ..._joinedRooms[index],
              'sportName': sportName,
              'fieldName': fieldName,
              'pricePerPerson': pricePerPerson,
              'maxParticipants': maxParticipants,
            };
            _filterJoinedRooms();
          }
        });

        _showSuccessPopup('‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');
      } else {
        _showSuccessPopup(
            '‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: ${response.body}');
      }
    } catch (e) {
      print('Error updating room: $e');
      _showSuccessPopup('‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡πâ‡∏≠‡∏á');
    }
  }

  Future<void> _deleteRoom(Map<String, dynamic> room) async {
    bool confirmDelete = await showDialog(
      context: context,
      builder: (context) => Theme(
        data: ThemeData(
          primaryColor: Colors.orange,
          colorScheme: ColorScheme.fromSwatch().copyWith(secondary: Colors.orange),
        ),
        child: AlertDialog(
          title: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á', style: TextStyle(color: Colors.orange)),
          content: const Text('‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ? ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ'),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context, false),
              child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å', style: TextStyle(color: Colors.grey)),
            ),
            ElevatedButton(
              onPressed: () => Navigator.pop(context, true),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.orange,
                foregroundColor: Colors.white,
              ),
              child: const Text('‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á'),
            ),
          ],
        ),
      ),
    );

    if (!confirmDelete) return;

    final url = Uri.parse('$baseUrl/rooms/${room["_id"]}?userId=$_userId');

    try {
      final prefs = await SharedPreferences.getInstance();
      final String? token = prefs.getString('jwt_token');

      final response = await http.delete(
        url,
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json',
        },
      );

      if (response.statusCode == 200) {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á SnackBar ‡∏™‡∏µ‡∏™‡πâ‡∏°
        await _fetchJoinedRoomsFromDatabase();
        widget.onRoomUpdated();

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á ${room["sportName"]} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! üß°'),
            backgroundColor: Colors.orange,
          ),
        );
      } else {
        // ‡∏Å‡∏£‡∏ì‡∏µ Error 500: ‡πÅ‡∏™‡∏î‡∏á Popup ‡∏™‡∏µ‡∏™‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        _showErrorPopup(
          '‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß',
          '‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à \n'
              '‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
        );
      }
    } catch (error) {
      // ‡∏Å‡∏£‡∏ì‡∏µ Exception: ‡πÅ‡∏™‡∏î‡∏á Popup ‡∏™‡∏µ‡∏™‡πâ‡∏°
      _showErrorPopup(
        '‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ: ${error.toString()}',
      );
    }
  }

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Popup ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡∏™‡πâ‡∏°
  void _showErrorPopup(String title, String message) {
    showDialog(
      context: context,
      builder: (context) => Theme(
        data: ThemeData(
          primaryColor: Colors.orange,
          colorScheme: ColorScheme.fromSwatch().copyWith(secondary: Colors.orange),
        ),
        child: AlertDialog(
          title: Text(title, style: const TextStyle(color: Colors.orange)),
          content: Text(message),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
                // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î Popup
                _fetchJoinedRoomsFromDatabase();
                widget.onRoomUpdated();
              },
              child: const Text('‡∏ï‡∏Å‡∏•‡∏á', style: TextStyle(color: Colors.orange)),
            ),
          ],
        ),
      ),
    );
  }


  /// ‡πÅ‡∏™‡∏î‡∏á Dialog ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
  void _showMembersDialog(Map<String, dynamic> room) {
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: Backend ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô field 'participants'
    final members = room['participants'] ?? [];
    print('Members data: $members');

    // Map ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö RoomDetailsDialog
    final participants = (members as List<dynamic>).map<Map<String, dynamic>>((m) {
      return {
        'name': m['name'] ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠',
        'age': m['age']?.toString() ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      };
    }).toList();

    showDialog(
      context: context,
      builder: (context) => RoomDetailsDialog(
        roomName: room['sportName'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏µ‡∏¨‡∏≤',
        participants: participants,
      ),
    );
  }

  /// ‡πÅ‡∏™‡∏î‡∏á Dialog Map (location = { lat: number, lng: number })
  void _showMapDialog(Map<String, dynamic> room) {
    final locationData = room['location'];
    double lat = 0.0;
    double lng = 0.0;

    if (locationData != null && locationData is Map<String, dynamic>) {
      lat = (locationData['lat'] as num?)?.toDouble() ?? 0.0;
      lng = (locationData['lng'] as num?)?.toDouble() ?? 0.0;
    }

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏ô‡∏≤‡∏° ${room['fieldName']}'),
          content: SizedBox(
            width: double.maxFinite,
            height: 300,
            child: FlutterMap(
              options: MapOptions(
                center: LatLng(lat, lng),
                zoom: 15.0,
              ),
              children: [
                TileLayer(
                  urlTemplate:
                  'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                  subdomains: ['a', 'b', 'c'],
                ),
                MarkerLayer(
                  markers: [
                    Marker(
                      width: 80.0,
                      height: 80.0,
                      point: LatLng(lat, lng),
                      builder: (ctx) =>
                      const Icon(Icons.location_on, color: Colors.red),
                    ),
                  ],
                ),
              ],
            ),
          ),
          actions: [
            // ‡∏õ‡∏∏‡πà‡∏° ‚Äú‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‚Äù ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏Å openMap
            TextButton.icon(
              icon: const Icon(Icons.navigation, color: Colors.blue),
              label: const Text('‡∏ô‡∏≥‡∏ó‡∏≤‡∏á'),
              onPressed: () {
                Navigator.pop(context);
                openMap(lat, lng);
              },
            ),
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('‡∏õ‡∏¥‡∏î'),
            ),
          ],
        );
      },
    );
  }

  /// Popup ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à/‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  void _showSuccessPopup(String title, String message) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(
            title,
            style: const TextStyle(
              color: Colors.orange,
              fontWeight: FontWeight.bold,
            ),
          ),
          content: Text(
            message,
            style: const TextStyle(color: Colors.black87),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                widget.onRoomUpdated();
              },
              child: const Text(
                '‡∏ï‡∏Å‡∏•‡∏á',
                style: TextStyle(color: Colors.orange),
              ),
            ),
          ],
        );
      },
    );
  }

  /// ‡∏™‡∏£‡πâ‡∏≤‡∏á UI List ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤ Join ‡πÅ‡∏•‡πâ‡∏ß
  @override
  Widget build(BuildContext context) {
    return _isLoading
        ? const Center(child: CircularProgressIndicator())
        : _errorMessage.isNotEmpty
        ? Center(child: Text(_errorMessage))
        : ListView.builder(
      padding: const EdgeInsets.all(16.0),
      itemCount: _filteredRooms.length,
      itemBuilder: (context, index) {
        final room = _filteredRooms[index];
        final isOwner = room['ownerId']?['_id'] == _userId;

        return Card(
          elevation: 4.0,
          margin: const EdgeInsets.symmetric(vertical: 8.0),
          child: Padding(
            padding: const EdgeInsets.all(12.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ / ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á
                Text(
                  room['sportName'] ?? '',
                  style: const TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 18,
                  ),
                ),
                const SizedBox(height: 4),
                Text('‡∏™‡∏ô‡∏≤‡∏°: ${room['fieldName']}'),
                Text('‡πÄ‡∏ß‡∏•‡∏≤: ${room['time']}'),
                Text('‡∏£‡∏≤‡∏Ñ‡∏≤: ${room['pricePerPerson']} ‡∏ö‡∏≤‡∏ó/‡∏Ñ‡∏ô'),
                Text(
                  '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${room['currentParticipants']}/${room['maxParticipants']} ‡∏Ñ‡∏ô',
                ),
                const SizedBox(height: 8),
                // ‡πÅ‡∏ñ‡∏ß‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    // ‡∏ã‡πâ‡∏≤‡∏¢
                    Row(
                      children: [
                        // ‡∏î‡∏π‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                        IconButton(
                          icon: const Icon(Icons.people,
                              color: Colors.green),
                          onPressed: () => _showMembersDialog(room),
                        ),
                        // ‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                        IconButton(
                          icon: const Icon(Icons.map,
                              color: Colors.orange),
                          onPressed: () => _showMapDialog(room),
                        ),
                        // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á (Blue)
                        IconButton(
                          icon: const Icon(Icons.navigation,
                              color: Colors.blue),
                          onPressed: () {
                            // ‡∏≠‡πà‡∏≤‡∏ô lat,lng ‡∏à‡∏≤‡∏Å room['location'] (object)
                            final locationData = room['location'];
                            if (locationData != null &&
                                locationData
                                is Map<String, dynamic>) {
                              final double lat =
                                  (locationData['lat'] as num?)
                                      ?.toDouble() ??
                                      0.0;
                              final double lng =
                                  (locationData['lng'] as num?)
                                      ?.toDouble() ??
                                      0.0;
                              openMap(lat, lng);
                            } else {
                              print('No valid location for navigation.');
                            }
                          },
                        ),
                      ],
                    ),
                    // ‡∏Ç‡∏ß‡∏≤
                    Row(
                      children: [
                        // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Owner => Edit, Delete
                        if (isOwner) ...[
                          IconButton(
                            icon: const Icon(Icons.edit,
                                color: Colors.blue),
                            onPressed: () => _editRoom(room),
                          ),
                          IconButton(
                            icon: const Icon(Icons.delete,
                                color: Colors.red),
                            onPressed: () => _deleteRoom(room),
                          ),
                        ],
                        // ‡∏ú‡∏π‡πâ‡∏£‡πà‡∏ß‡∏° => Cancel (leave)
                        if (!isOwner)
                          IconButton(
                            icon: const Icon(Icons.exit_to_app,
                                color: Colors.red),
                            onPressed: () => _cancelRoom(room),
                          ),
                      ],
                    ),
                  ],
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}